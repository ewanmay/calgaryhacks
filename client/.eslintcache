[{"C:\\Workspaces\\wec-practice\\client\\src\\index.tsx":"1","C:\\Workspaces\\wec-practice\\client\\src\\App.tsx":"2","C:\\Workspaces\\wec-practice\\client\\src\\context\\context.tsx":"3","C:\\Workspaces\\wec-practice\\client\\src\\context\\reducer.tsx":"4","C:\\Workspaces\\wec-practice\\client\\src\\context\\state.tsx":"5","C:\\Workspaces\\wec-practice\\client\\src\\context\\socket.tsx":"6","C:\\Workspaces\\calgaryhacks\\client\\src\\index.tsx":"7","C:\\Workspaces\\calgaryhacks\\client\\src\\App.tsx":"8","C:\\Workspaces\\calgaryhacks\\client\\src\\context\\context.tsx":"9","C:\\Workspaces\\calgaryhacks\\client\\src\\context\\reducer.tsx":"10","C:\\Workspaces\\calgaryhacks\\client\\src\\context\\state.tsx":"11","C:\\Workspaces\\calgaryhacks\\client\\src\\context\\socket.tsx":"12","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\Auth.tsx":"13","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\Landing.tsx":"14","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\Groups.tsx":"15","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\Profile.tsx":"16","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\Register.tsx":"17","C:\\Workspaces\\calgaryhacks\\client\\src\\utils\\inputUtils.ts":"18","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\shared\\Navbar.tsx":"19","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\ConnectSteamModal.tsx":"20","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\Chat.tsx":"21","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\UserList.tsx":"22","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\CommonGames.tsx":"23","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\GameItem.tsx":"24","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\SetPlayerModal.tsx":"25","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\VideoChat.tsx":"26"},{"size":328,"mtime":1610480469272,"results":"27","hashOfConfig":"28"},{"size":459,"mtime":1610480469266,"results":"29","hashOfConfig":"28"},{"size":532,"mtime":1610480469270,"results":"30","hashOfConfig":"28"},{"size":308,"mtime":1610480469270,"results":"31","hashOfConfig":"28"},{"size":121,"mtime":1610480469269,"results":"32","hashOfConfig":"28"},{"size":120,"mtime":1610480469269,"results":"33","hashOfConfig":"28"},{"size":425,"mtime":1613243649345,"results":"34","hashOfConfig":"35"},{"size":1817,"mtime":1613273694132,"results":"36","hashOfConfig":"35"},{"size":532,"mtime":1613237454258,"results":"37","hashOfConfig":"35"},{"size":555,"mtime":1613270835847,"results":"38","hashOfConfig":"35"},{"size":560,"mtime":1613278799345,"results":"39","hashOfConfig":"35"},{"size":278,"mtime":1613238644072,"results":"40","hashOfConfig":"35"},{"size":2686,"mtime":1613271326377,"results":"41","hashOfConfig":"35"},{"size":876,"mtime":1613280074226,"results":"42","hashOfConfig":"35"},{"size":3869,"mtime":1613281389104,"results":"43","hashOfConfig":"35"},{"size":3627,"mtime":1613281110387,"results":"44","hashOfConfig":"35"},{"size":3123,"mtime":1613249254839,"results":"45","hashOfConfig":"35"},{"size":600,"mtime":1613254589259,"results":"46","hashOfConfig":"35"},{"size":1936,"mtime":1613277271302,"results":"47","hashOfConfig":"35"},{"size":1705,"mtime":1613280009339,"results":"48","hashOfConfig":"35"},{"size":3030,"mtime":1613276554410,"results":"49","hashOfConfig":"35"},{"size":1020,"mtime":1613267687397,"results":"50","hashOfConfig":"35"},{"size":839,"mtime":1613281206846,"results":"51","hashOfConfig":"35"},{"size":510,"mtime":1613271277015,"results":"52","hashOfConfig":"35"},{"size":3594,"mtime":1613280435775,"results":"53","hashOfConfig":"35"},{"size":2373,"mtime":1613282005646,"results":"54","hashOfConfig":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"1334qxy",{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1w7oxx",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Workspaces\\wec-practice\\client\\src\\index.tsx",[],["124","125"],"C:\\Workspaces\\wec-practice\\client\\src\\App.tsx",["126","127"],"import React, { useContext, useEffect } from 'react';\nimport { AppContext } from './context/context';\nimport './App.css';\n\nfunction App() {\n  const [state, dispatch] = useContext(AppContext)\n  \n  useEffect(() => {\n    setInterval(() => state.socket.emit(\"hello\"), 2000);    \n    state.socket.on('hello-response', () => console.log(\"server said hello\"));\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      Hello there\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Workspaces\\wec-practice\\client\\src\\context\\context.tsx",[],"C:\\Workspaces\\wec-practice\\client\\src\\context\\reducer.tsx",["128","129"],"import { State } from \"./types\";\r\n\r\nexport const reducer = (state: State, action: Record<string, any>): State => {\r\n  switch (action.type) {\r\n    case \"ACTION_TYPE_1\": {\r\n      return state;\r\n    };\r\n    case \"ACTION_TYPE_2\": {\r\n      return state;\r\n    };\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}","C:\\Workspaces\\wec-practice\\client\\src\\context\\state.tsx",[],"C:\\Workspaces\\wec-practice\\client\\src\\context\\socket.tsx",[],"C:\\Workspaces\\calgaryhacks\\client\\src\\index.tsx",[],["130","131"],"C:\\Workspaces\\calgaryhacks\\client\\src\\App.tsx",[],"C:\\Workspaces\\calgaryhacks\\client\\src\\context\\context.tsx",[],"C:\\Workspaces\\calgaryhacks\\client\\src\\context\\reducer.tsx",[],"C:\\Workspaces\\calgaryhacks\\client\\src\\context\\state.tsx",[],"C:\\Workspaces\\calgaryhacks\\client\\src\\context\\socket.tsx",[],"C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\Auth.tsx",["132"],"import React, { ChangeEvent, useContext, useEffect, useState } from 'react';\r\nimport { Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { AppContext } from '../../context/context';\r\nimport { AuthState } from '../../context/types';\r\nimport { nameValidation } from '../../utils/inputUtils';\r\nimport './Auth.css';\r\n\r\nfunction Auth() {\r\n  const [state, dispatch] = useContext(AppContext)\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [errorMessage, setErrorMessage] = useState([] as string[])\r\n\r\n  useEffect(() => {\r\n    state.socket.on('login-response', (login: AuthState) => {\r\n      dispatch({ type: \"LOGIN\", payload: login })\r\n    })\r\n  }, [])\r\n\r\n  const logIn = () => {\r\n    const usernameError = nameValidation(\"Username\", username)\r\n    const passwordError = nameValidation(\"Password\", password)\r\n\r\n    if (!usernameError && !passwordError) {\r\n      state.socket.emit(\"login\", { username, password })\r\n    }\r\n    else {\r\n      const allErrors: string[] = [];\r\n      [usernameError, passwordError].forEach((error: string | null) => {\r\n        if (error && error.length > 0) {\r\n          allErrors.push(error)\r\n        }\r\n      })\r\n      setErrorMessage(allErrors)\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"col-12 p-0 flex center\" onKeyPress ={(e) => { if (e.key === \"Enter\") { logIn() } }}>\r\n      <div className=\"col-4 p-0 flex center\">\r\n        <h3>Welcome to Games Night</h3>\r\n        <div className=\"error-message col-12\">\r\n          {state.authState.errorMessage}\r\n          {errorMessage.map((error: string) => (\r\n            <div className=\"col-12 p-0 error-message\">\r\n              {error}\r\n            </div>))\r\n          }\r\n        </div>\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n            placeholder=\"Username\"\r\n            className=\"col-12\"\r\n            aria-label=\"Username\"\r\n            aria-describedby=\"basic-addon1\"\r\n            onChange={(value: ChangeEvent<any>) => setUsername(value.target.value)}\r\n          />\r\n        </InputGroup>\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n            placeholder=\"Password\"\r\n            aria-label=\"Password\"\r\n            aria-describedby=\"basic-addon2\"\r\n            type='password'\r\n            onChange={(value: ChangeEvent<any>) => setPassword(value.target.value)}\r\n          />\r\n        </InputGroup>\r\n\r\n        <Button onClick={() => logIn()}>Log in</Button>\r\n        <div className=\"col-12\" style={{margin: 10}}>\r\n          New here? <Link to=\"/sign-up\"> Sign up</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Auth;\r\n","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\Landing.tsx",["133"],"import React, { useContext, useEffect } from 'react';\r\nimport { AppContext } from '../../context/context';\r\nimport './Landing.css';\r\n\r\nfunction Landing() {\r\n  const [state, dispatch] = useContext(AppContext)\r\n\r\n  useEffect(() => {\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"col-12 p-0 flex fill center landing\">  \r\n          <div className=\"col-12 p-0\" style={{ position: 'absolute', top: 15, fontSize: 20}} >\r\n            Welcome back, {state.authState.username}\r\n          </div>\r\n          <div className='test'>\r\n            <div className=\"col-12 p-0 header\">\r\n              Activity\r\n            </div>\r\n            <div className=\"col-12 p-0 header\">\r\n                Find Group\r\n            </div>\r\n            <div className=\"col-12 p-0 header\">\r\n                Recent Games\r\n            </div>\r\n          </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\Groups.tsx",["134"],"import { faClipboard } from '@fortawesome/free-regular-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { ChangeEvent, useContext, useState } from 'react';\r\nimport { Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport 'react-chat-widget/lib/styles.css';\r\nimport { AppContext } from '../../context/context';\r\nimport Chat from '../Chat';\r\nimport Userlist from '../UserList';\r\nimport VideoChat from '../VideoChat';\r\nimport CommonGames from './CommonGames';\r\nimport './Groups.css';\r\n\r\nfunction Groups() {\r\n  const [state, dispatch] = useContext(AppContext)\r\n  const [lobbyCode, setLobbyCode] = useState('')\r\n  const [inLobby, setInLobby] = useState(false)\r\n\r\n  const createLobby = () => {\r\n    // Ask server to create lobby\r\n\r\n    // Once created, set lobby code and change what we display somehow\r\n    state.socket.once('join-lobby-err', (msg: any) => console.log(msg)) // TODO\r\n    state.socket.once('joined-lobby', (res: any) => {\r\n      setInLobby(true)\r\n      setLobbyCode(res.lobbyCode)\r\n    })\r\n    state.socket.emit('create-lobby', state.authState.username);\r\n    state.socket.emit('get-games')\r\n  }\r\n\r\n  const joinLobby = () => {\r\n    console.log(\"Clicked join lobby\")\r\n    state.socket.once('join-lobby-err', (msg: any) => console.log(msg)) // TODO\r\n    state.socket.once('joined-lobby', ({ lobbyCode, users }: any) => {\r\n      console.log(\"LobbyCode:\", lobbyCode)\r\n      setInLobby(true)\r\n    })\r\n    state.socket.emit('join-lobby', { username: state.authState.username, lobbyCode })\r\n    state.socket.emit('get-games')\r\n  }\r\n\r\n  const leaveLobby = () => {\r\n    console.log(\"leaving lobby\")\r\n    state.socket.emit('leave-lobby')\r\n\r\n    setInLobby(false)\r\n    setLobbyCode('')\r\n  }\r\n\r\n  return (\r\n    <div className=\"fill flex center nowrap\">\r\n\r\n      {!inLobby && (\r\n        <div className=\"col-6 p-0 flex center column\">\r\n\r\n          <div id=\"groups-join-lobby\" className=\"mt-3\">\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                placeholder=\"Lobby Code\"\r\n                className=\"col-12\"\r\n                aria-label=\"Lobby Code\"\r\n                aria-describedby=\"basic-addon1\"\r\n                onChange={(value: ChangeEvent<any>) => setLobbyCode(value.target.value)}\r\n              />\r\n              <InputGroup.Append>\r\n                <Button onClick={() => joinLobby()}>Join Lobby</Button>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </div>\r\n          OR\r\n          <div id=\"groups-create-lobby\" className=\"m-3\">\r\n            <Button onClick={() => createLobby()}>Create Lobby</Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {inLobby && (\r\n        <>\r\n          <div id='groups'>\r\n            <div id=\"groups-main\">\r\n              <div id=\"groups-left\">\r\n                <div className=\"p-3\">\r\n                  <div className='flex row' style={{alignItems: 'center'}}>\r\n                    <Button onClick={() => leaveLobby()}>Leave Lobby</Button>\r\n                    <b className=\"pl-3\" id='code' style={{fontFamily: 'monospace', fontSize: 17}}>Code: {lobbyCode}</b>\r\n                    <div className='pointer' onClick={() => {navigator.clipboard.writeText(lobbyCode)}}>\r\n                      <FontAwesomeIcon icon={faClipboard} style={{marginLeft: 5}}></FontAwesomeIcon>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <Userlist />                \r\n                <VideoChat roomName={lobbyCode}/>\r\n              </div>\r\n              <div id=\"groups-middle\">\r\n                <CommonGames></CommonGames>\r\n              </div>\r\n              <div id=\"groups-right\">\r\n                <h5>Chat</h5>\r\n                <Chat />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Groups;\r\n","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\Profile.tsx",["135","136","137","138"],"import { faPlayCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { AppContext } from '../../context/context';\r\nimport { Game } from '../../context/types';\r\nimport ConnectSteamModal from './ConnectSteamModal';\r\nimport './Profile.css';\r\nimport SetPlayerModal from './SetPlayerModal';\r\n\r\nfunction Profile() {\r\n  const [state, dispatch] = useContext(AppContext)\r\n  const [steamId, setSteamId] = useState(\"\")\r\n  const [showSteamModal, setShowModal] = useState(false)\r\n  const [showPlayerModal, setPlayerModal] = useState(false)\r\n  const [openGame, setOpenGame] = useState({} as Game)\r\n  const steam = state.profile.steam\r\n\r\n  const refreshUser = () => {\r\n    state.socket.emit(\"get-steam-info\", state.authState.username)\r\n  }\r\n\r\n  useEffect(() => {\r\n    state.socket.emit(\"get-steam-info\", state.authState.username)\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"fill col-12 p-0 flex center column\">\r\n      {steam.steamUsername.length === 0 && (<Button onClick={() => setShowModal(true)}>Connect Steam Account</Button>)}\r\n      {steam.steamUsername.length !== 0 && steam.games.length === 0 && (\r\n        <div className=\"col-12 p-0\">\r\n          Steam account connected, but no games found. Make sure \"Game details\" is set to Public.\r\n          You can find your game privacy settings <a href={`https://steamcommunity.com/profiles/${state.profile.steam.steamId}/edit/settings`}>here</a>.\r\n          <Button className=\"m-2\" onClick={() => { refreshUser() }}>Refresh profile</Button>\r\n        </div>\r\n      )}\r\n      {showSteamModal && (<ConnectSteamModal close={() => { setShowModal(false) }}></ConnectSteamModal>)}\r\n      {showPlayerModal && (<SetPlayerModal game={openGame} close={() => setPlayerModal(false)}></SetPlayerModal>)}\r\n      {steam.games.length > 0 && (\r\n        <div className=\"col-12 p-0 flex center left column\">\r\n          <h4 className=\"col-auto p-2\">\r\n            Your Multiplayer Games\r\n          </h4>\r\n          <div className=\"col-6 p-0 game-container left flex\">\r\n            {state.profile.steam.games.map((game: Game) => {\r\n\r\n              return (\r\n                <div className=\"col-12 px-0 game-list-item cursor flex space-between\">\r\n                  <a className=\"col-3\" href={game.website} target=\"_blank\" rel=\"noreferrer\">\r\n                    {game.name}\r\n                    <i> (Steam)</i>\r\n                  </a>\r\n                  <div className=\"col-3\">\r\n                    {game.minPlayers && game.maxPlayers &&\r\n                      (<div className=\"\">\r\n                        {game.minPlayers}-{game.maxPlayers}\r\n                      </div>)\r\n                    }\r\n                    {!game.minPlayers && !game.maxPlayers &&\r\n                      (<div className=\"\">\r\n                        <Button onClick={() => { setOpenGame(game); setPlayerModal(true) }}>Provide Players</Button>\r\n                      </div>)\r\n                    }\r\n                  </div>\r\n                  {/* Preferred min: Preferred max: player */}\r\n                  <a className=\"col-auto flex center\" href={`steam://run/${game.appid}//`}>\r\n                    <i className=\"col-auto flex center\">\r\n                      Open in Steam\r\n                    <FontAwesomeIcon size=\"2x\" className=\"px-2\" icon={faPlayCircle} />\r\n                    </i>\r\n                  </a>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>)}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\Register.tsx",["139"],"import React, { ChangeEvent, useContext, useEffect, useState } from 'react';\r\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { AppContext } from '../../context/context';\r\nimport { AuthState } from '../../context/types';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { emailValidation, nameValidation } from '../../utils/inputUtils';\r\n\r\nfunction Register() {\r\n  const [state, dispatch] = useContext(AppContext)\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [errorMessage, setErrorMessage] = useState([] as string[])\r\n  const [email, setEmail] = useState('')\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    state.socket.on(\"register-response\", (res: AuthState) => {\r\n      if (res.loggedIn) {\r\n        dispatch({ type: \"LOGIN\", payload: res })\r\n        history.push(\"/\");\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  const registerUser = () => {\r\n    const usernameError = nameValidation(\"Username\", username)\r\n    const passwordError = nameValidation(\"Password\", password)\r\n    const emailError = emailValidation(email)\r\n\r\n    if (!usernameError && !passwordError && !emailError) {\r\n      state.socket.emit(\"register\", { username, password, email })\r\n\r\n    }\r\n    else {\r\n      const allErrors: string[] = [];\r\n      [usernameError, passwordError, emailError].forEach((error: string | null) => {\r\n        if (error && error.length > 0) {\r\n          allErrors.push(error)\r\n        }\r\n      })\r\n      setErrorMessage(allErrors)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-12 p-0 flex center\">\r\n      <div className=\"col-3 p-0 flex center\">\r\n        <h3>Join the club</h3>\r\n        <div className=\"error-message col-12\">\r\n          {state.authState.errorMessage}\r\n          {errorMessage.map((error: string) => (\r\n            <div className=\"col-12 p-0 error-message\">\r\n              {error}\r\n            </div>))\r\n          }\r\n        </div>\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n            placeholder=\"Email\"\r\n            aria-label=\"Email\"\r\n            aria-describedby=\"basic-addon2\"\r\n            onChange={(value: ChangeEvent<any>) => setEmail(value.target.value)}\r\n          />\r\n        </InputGroup>\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n            placeholder=\"Username\"\r\n            className=\"col-12\"\r\n            aria-label=\"Username\"\r\n            aria-describedby=\"basic-addon1\"\r\n            onChange={(value: ChangeEvent<any>) => setUsername(value.target.value)}\r\n          />\r\n        </InputGroup>\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n            placeholder=\"Password\"\r\n            aria-label=\"Password\"\r\n            aria-describedby=\"basic-addon2\"\r\n            onChange={(value: ChangeEvent<any>) => setPassword(value.target.value)}\r\n          />\r\n        </InputGroup>\r\n        <Button onClick={() => registerUser()}>Sign up</Button>\r\n\r\n        <div className=\"col-12 mt-3\">\r\n          Already have an account? <Link to=\"/\">Log in</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","C:\\Workspaces\\calgaryhacks\\client\\src\\utils\\inputUtils.ts",[],"C:\\Workspaces\\calgaryhacks\\client\\src\\components\\shared\\Navbar.tsx",["140","141"],"import React, { useContext, useEffect } from 'react';\r\nimport { AppContext } from '../../context/context';\r\nimport { Navbar as BootstrapNavbar } from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport './Navbar.css'\r\nimport { faUser, faUserCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faSignOutAlt, faHome, faUsers } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function Navbar() {\r\n  const [state, dispatch] = useContext(AppContext)\r\n\r\n  useEffect(() => {\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n\r\n  const signout = () => {\r\n    history.push(\"/\");\r\n    dispatch({ type: \"LOGOUT\" })\r\n  }\r\n\r\n  return (\r\n    <BootstrapNavbar expand=\"lg\" className=\"navbar fit\">\r\n      <BootstrapNavbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <BootstrapNavbar.Collapse id=\"basic-navbar-nav\">\r\n        <div className=\"col-12 p-0 flex space-between\">\r\n          <div className=\"col-auto flex center\">\r\n            <Link className=\"navlink p-1\" to=\"/home\">\r\n              <FontAwesomeIcon icon={faHome} className='ic'/>\r\n              Home\r\n            </Link>\r\n            <Link className=\"navlink p-1\" to=\"/profile\">\r\n              <FontAwesomeIcon icon={faUserCircle} className='ic'/>\r\n              Profile\r\n            </Link>\r\n            <Link className=\"navlink p-1\" to=\"/groups\">\r\n              <FontAwesomeIcon icon={faUsers} className='ic'/>\r\n              Groups\r\n            </Link>\r\n          </div>\r\n\r\n          <div className=\"p-1\" style={{marginRight: 190}}>\r\n            Games Night\r\n          </div>\r\n\r\n          <div className=\"p-1 pointer\" onClick={signout}>            \r\n            <FontAwesomeIcon icon={faSignOutAlt} className='ic' style={{marginBottom: -1}}/>\r\n            Logout\r\n          </div>\r\n\r\n        </div>\r\n      </BootstrapNavbar.Collapse>\r\n    </BootstrapNavbar>\r\n  );\r\n}\r\n\r\n","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\ConnectSteamModal.tsx",["142"],"import React, { ChangeEvent, useContext, useEffect, useState } from 'react';\r\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { AppContext } from '../../context/context';\r\n\r\ninterface ConnectSteamModalProps {\r\n  close: any\r\n}\r\n\r\nfunction ConnectSteamModal({ close }: ConnectSteamModalProps) {\r\n  const [state, dispatch] = useContext(AppContext)\r\n\r\n  const [steamId, setSteamId] = useState(\"\")\r\n  const connectSteamId = () => {\r\n    state.socket.emit(\"add-steamid\", state.authState.username, steamId)\r\n    state.socket.on(\"steamid-added\", (succeeded: boolean) => {\r\n      close()\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n  }, [])\r\n  return (\r\n    <div className=\"modal-background flex center\">\r\n      <div className=\"modal flex center column\">\r\n        <div className=\"modal-header\">\r\n          Connect Steam ID\r\n        </div>\r\n        <div className=\"error-message\">\r\n          {state.profile.steam.steamError}\r\n        </div>\r\n        <div>\r\n          You can find your steam ID\r\n          <a href=\"https://store.steampowered.com/account/\">\r\n            here\r\n          </a>\r\n        </div>\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n            placeholder=\"Steam ID\"\r\n            aria-label=\"Steam ID\"\r\n            aria-describedby=\"basic-addon2\"\r\n            onChange={(value: ChangeEvent<any>) => setSteamId(value.target.value)}\r\n          />\r\n          <div className=\"col-12 p-0\">\r\n            <Button className=\"m-3\" onClick={connectSteamId}>Connect</Button>\r\n            <Button variant=\"secondary\" onClick={() => close()}>Close</Button>\r\n          </div>\r\n        </InputGroup>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ConnectSteamModal;\r\n","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\Chat.tsx",["143","144"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport { AppContext } from '../context/context'\r\nimport { ClientMessage, ServerMessage } from '../context/types'\r\nimport './Chat.css'\r\nconst EMOJIS = require('smile2emoji').emojiMap;\r\n\r\nconst TIMESTAMP_OPTIONS = { hour: '2-digit', minute: '2-digit', hour12: false }\r\n\r\n\r\nfunction emojify(text: string) {\r\n  for (const [trigger, emoji] of Object.entries(EMOJIS)) {\r\n    text = text.replace(trigger as string, emoji as string)\r\n  }\r\n  return text\r\n}\r\ninterface MessageProps {\r\n  m: ServerMessage\r\n}\r\n\r\nfunction Message({m}: MessageProps) {\r\n  const [state, dispatch] = useContext(AppContext)\r\n  const {username, messageContents, date} = m\r\n\r\n  function renderTime(date: string) {\r\n    const d = new Date(date)\r\n    return d.toLocaleTimeString('en-US', TIMESTAMP_OPTIONS)\r\n  }\r\n\r\n  const isSelf = username === state.authState.username\r\n  const msgStyle = {\r\n    background: isSelf ? '#35917d' : '#eee',\r\n    color: isSelf ? 'white' : 'black',\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className='msgContainer'\r\n      style={{\r\n        justifyContent: isSelf ? 'flex-end' : 'flex-start',\r\n      }}\r\n    >\r\n      <li\r\n        style={{\r\n          alignItems: isSelf ? 'flex-end' : 'flex-start',\r\n        }}\r\n      >\r\n        <div className='details'>\r\n          <span className='timestamp'>{renderTime(date)}</span>\r\n          <span className='username'>{username}</span>\r\n        </div>\r\n        <div className='msg' style={msgStyle}>\r\n          {messageContents}\r\n        </div>\r\n      </li>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Chat() {\r\n  const [state, dispatch] = useContext(AppContext)\r\n  const [text, setText] = useState('')\r\n  const [messages, setMessages] = useState([] as ServerMessage[])\r\n\r\n  function createMessage(msg: string): ClientMessage  {\r\n    return {\r\n      username: state.authState.username,\r\n      messageContents: msg\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    state.socket.on('message-log', function (msgs: ServerMessage[]) {\r\n      console.log('got messages', msgs.length)\r\n      setMessages(msgs)\r\n    })\r\n  }, [state.socket])\r\n\r\n\r\n  useEffect(() => {\r\n    // when msgs change, scroll to bottom\r\n    const elem = document.getElementById('messages')\r\n    if (elem) elem.scrollTop = elem.scrollHeight\r\n  }, [messages])\r\n\r\n  function handleSend(e: any) {\r\n    e.preventDefault() // prevent refresh\r\n    if (text.trim()) {\r\n      state.socket.emit('add-chat-message', createMessage(text))\r\n    }\r\n    setText('')\r\n  }\r\n\r\n  return (\r\n    <div id='chat'>\r\n      <div id='messagesContainer'>\r\n        <ul id='messages'>\r\n          {messages.map((m: ServerMessage, i) => (\r\n            <Message key={i} m={m} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <form id='chat-form' onSubmit={handleSend}>\r\n        <input\r\n          id='chat-input'\r\n          value={text}\r\n          onChange={e => setText(emojify(e.target.value))}\r\n          autoComplete='off'\r\n        />\r\n        <button>Send</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat\r\n","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\UserList.tsx",["145","146","147"],"\r\nimport React, { useEffect, useState, useContext } from 'react'\r\nimport { AppContext } from '../context/context'\r\nimport { User } from '../context/types'\r\nimport './UserList.css'\r\n\r\ninterface LobbyInfo {\r\n  users: string[],\r\n  lobbyCode: string\r\n}\r\n\r\nfunction Userlist() {\r\n  const [state, dispatch] = useContext(AppContext)\r\n  const [userList, setUserList] = useState([] as string[])\r\n\r\n  useEffect(() => {\r\n    state.socket.on('lobby-updated', function ({ users }: LobbyInfo) {\r\n      setUserList(users)\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div id='userlist'>\r\n      <div>Online ({userList.length})</div>\r\n      {userList.map((username: string, i: number) => {\r\n        const isSelf = username === state.authState.username\r\n        return (\r\n          <p\r\n            key={i}\r\n            style={{\r\n              fontWeight: isSelf ? 'bold' : 'normal'\r\n            }}\r\n          >\r\n            {username + (isSelf ? ' (You)' : '')}\r\n          </p>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Userlist","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\CommonGames.tsx",["148"],"import React, { useContext } from 'react';\r\nimport { AppContext } from '../../context/context';\r\nimport { Game } from '../../context/types';\r\nimport GameItem from './GameItem';\r\nimport './Landing.css';\r\nfunction CommonGames() {\r\n  const [state, dispatch] = useContext(AppContext)\r\n\r\n  return (\r\n    <div className=\"col-12 p-0 flex fill center top landing\">\r\n      <div className=\"col-12 header\">\r\n        Shared Games\r\n      </div>\r\n      <div className=\"col-8 p-0 fill left top\">\r\n        {state.commonGames.steamGames.map((game: Game) => (<GameItem game={game}></GameItem>))}\r\n        {state.commonGames.epicGames.map((game: Game) => (<GameItem game={game}></GameItem>))}\r\n        {state.commonGames.freeGames.map((game: Game) => (<GameItem game={game}></GameItem>))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommonGames;\r\n\r\n","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\GameItem.tsx",["149","150","151"],"import React, { useContext, useEffect } from 'react';\r\nimport { AppContext } from '../../context/context';\r\nimport { Game } from '../../context/types';\r\nimport './Landing.css'\r\n\r\ninterface GameItemProps {\r\n  game: Game\r\n}\r\n\r\nexport default function GameItem({ game }: GameItemProps) {\r\n  const [state, dispatch] = useContext(AppContext)\r\n\r\n  return (\r\n    <div className=\"col-12 p-0 flex game-list-item\">\r\n      <a href={`steam://run/${game.appid}//`}>\r\n        {game.name}\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\n",["152","153"],"C:\\Workspaces\\calgaryhacks\\client\\src\\components\\pages\\SetPlayerModal.tsx",["154"],"import React, { ChangeEvent, useContext, useEffect, useState } from 'react';\r\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { AppContext } from '../../context/context';\r\nimport { Game } from '../../context/types';\r\n\r\ninterface ConnectSteamModalProps {\r\n  close: any,\r\n  game: Game\r\n}\r\n\r\nfunction SetPlayerModal({ close, game }: ConnectSteamModalProps) {\r\n  const [state, dispatch] = useContext(AppContext)\r\n  const [min, setMin] = useState(0)\r\n  const [max, setMax] = useState(0)\r\n  const [inputError, setInputErro] = useState(\"\")\r\n\r\n  const isNumeric = (str: string) => {\r\n    if (typeof str != \"string\") return false // we only process strings!  \r\n    const trimmed: any = str.trim();\r\n    const parsedInt = parseInt(trimmed as string);\r\n    return !isNaN(trimmed as number) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n      !isNaN(parsedInt) // ...and ensure strings of whitespace fail\r\n  }\r\n\r\n  const setMinPlayers = (appid: any, minPlayers: string) => {\r\n    if (!isNumeric(minPlayers)) {\r\n      setInputErro(\"Min needs to be numeric\")\r\n    }\r\n    else {\r\n      setInputErro(\"\")\r\n    }\r\n    state.socket.emit('change-game-min-players', ({ appid, minPlayers }))\r\n    setMin(parseInt(minPlayers.trim()))\r\n  }\r\n\r\n  const setMaxPlayers = (appid: any, maxPlayers: string) => {\r\n    if (!isNumeric(maxPlayers)) {\r\n      setInputErro(\"Max needs to be numeric\")\r\n      return\r\n    }\r\n    else {\r\n      setInputErro(\"\")\r\n      state.socket.emit('change-game-max-players', ({ appid, maxPlayers }))\r\n      setMax(parseInt(maxPlayers.trim()))\r\n    }\r\n  }\r\n\r\n  const setMinMaxPlayers = () => {\r\n\r\n    if (min > max) {\r\n      setInputErro(\"Max needs to be greater than or equal to minimum players allowed\")\r\n    }\r\n    else {\r\n      setInputErro(\"\")\r\n      state.socket.emit('update-preferred-players', state.authState.username, game.appid, min, max)\r\n      close();\r\n    }\r\n    // update-preferred-players\r\n  }\r\n\r\n  useEffect(() => {\r\n  }, [])\r\n  return (\r\n    <div className=\"modal-background flex center\">\r\n      <div className=\"modal flex center column\">\r\n        <div className=\"modal-header\">\r\n          Set player minimums and maximum for game\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          This is taken into account with other inputs to provide an accurate count.\r\n        </div>\r\n        <div className=\"modal-bordy error-message\">\r\n          {inputError}\r\n        </div>\r\n        <InputGroup className=\"flex center\">\r\n          <FormControl\r\n            placeholder={\"\" + (game.minPlayers ? game.minPlayers : 0)}\r\n            aria-label=\"Min Players\"\r\n            className=\"col-3\"\r\n            aria-describedby=\"basic-addon2\"\r\n            onChange={(value: ChangeEvent<any>) => setMinPlayers(game.appid, value.target.value)}\r\n          />\r\n          <div className=\"col-1 px-1 modal-body\">\r\n            to\r\n          </div>\r\n          <FormControl\r\n            placeholder={\"\" + (game.maxPlayers ? game.maxPlayers : 0)}\r\n            aria-label=\"Max Players\"\r\n            className=\"col-3\"\r\n            aria-describedby=\"basic-addon2\"\r\n            onChange={(value: ChangeEvent<any>) => setMaxPlayers(game.appid, value.target.value)}\r\n          />\r\n          <div className=\"col-12 py-0\">\r\n            <Button className=\"mx-2\" onClick={() => setMinMaxPlayers()}>Submit</Button>\r\n            <Button className=\"mx-2\" variant=\"secondary\" onClick={() => close()}>Close</Button>\r\n          </div>\r\n        </InputGroup>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SetPlayerModal;\r\n","C:\\Workspaces\\calgaryhacks\\client\\src\\components\\VideoChat.tsx",["155","156","157"],{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":6,"column":17,"nodeType":"164","messageId":"165","endLine":6,"endColumn":25},{"ruleId":"166","severity":1,"message":"167","line":11,"column":6,"nodeType":"168","endLine":11,"endColumn":8,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":5,"column":27,"nodeType":"172","messageId":"173","endLine":7,"endColumn":6},{"ruleId":"170","severity":1,"message":"171","line":8,"column":27,"nodeType":"172","messageId":"173","endLine":10,"endColumn":6},{"ruleId":"158","replacedBy":"174"},{"ruleId":"160","replacedBy":"175"},{"ruleId":"166","severity":1,"message":"176","line":19,"column":6,"nodeType":"168","endLine":19,"endColumn":8,"suggestions":"177"},{"ruleId":"162","severity":1,"message":"163","line":6,"column":17,"nodeType":"164","messageId":"165","endLine":6,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":14,"column":17,"nodeType":"164","messageId":"165","endLine":14,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":12,"column":17,"nodeType":"164","messageId":"165","endLine":12,"endColumn":25},{"ruleId":"162","severity":1,"message":"178","line":13,"column":10,"nodeType":"164","messageId":"165","endLine":13,"endColumn":17},{"ruleId":"162","severity":1,"message":"179","line":13,"column":19,"nodeType":"164","messageId":"165","endLine":13,"endColumn":29},{"ruleId":"166","severity":1,"message":"180","line":25,"column":6,"nodeType":"168","endLine":25,"endColumn":8,"suggestions":"181"},{"ruleId":"166","severity":1,"message":"182","line":23,"column":6,"nodeType":"168","endLine":23,"endColumn":8,"suggestions":"183"},{"ruleId":"162","severity":1,"message":"184","line":6,"column":10,"nodeType":"164","messageId":"165","endLine":6,"endColumn":16},{"ruleId":"162","severity":1,"message":"185","line":11,"column":10,"nodeType":"164","messageId":"165","endLine":11,"endColumn":15},{"ruleId":"162","severity":1,"message":"163","line":10,"column":17,"nodeType":"164","messageId":"165","endLine":10,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":21,"column":17,"nodeType":"164","messageId":"165","endLine":21,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":60,"column":17,"nodeType":"164","messageId":"165","endLine":60,"endColumn":25},{"ruleId":"162","severity":1,"message":"186","line":4,"column":10,"nodeType":"164","messageId":"165","endLine":4,"endColumn":14},{"ruleId":"162","severity":1,"message":"163","line":13,"column":17,"nodeType":"164","messageId":"165","endLine":13,"endColumn":25},{"ruleId":"166","severity":1,"message":"167","line":20,"column":6,"nodeType":"168","endLine":20,"endColumn":8,"suggestions":"187"},{"ruleId":"162","severity":1,"message":"163","line":7,"column":17,"nodeType":"164","messageId":"165","endLine":7,"endColumn":25},{"ruleId":"162","severity":1,"message":"188","line":1,"column":29,"nodeType":"164","messageId":"165","endLine":1,"endColumn":38},{"ruleId":"162","severity":1,"message":"185","line":11,"column":10,"nodeType":"164","messageId":"165","endLine":11,"endColumn":15},{"ruleId":"162","severity":1,"message":"163","line":11,"column":17,"nodeType":"164","messageId":"165","endLine":11,"endColumn":25},{"ruleId":"158","replacedBy":"189"},{"ruleId":"160","replacedBy":"190"},{"ruleId":"162","severity":1,"message":"163","line":12,"column":17,"nodeType":"164","messageId":"165","endLine":12,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":11,"column":17,"nodeType":"164","messageId":"165","endLine":11,"endColumn":25},{"ruleId":"162","severity":1,"message":"191","line":13,"column":10,"nodeType":"164","messageId":"165","endLine":13,"endColumn":22},{"ruleId":"162","severity":1,"message":"192","line":49,"column":9,"nodeType":"164","messageId":"165","endLine":49,"endColumn":20},"no-native-reassign",["193"],"no-negated-in-lhs",["194"],"@typescript-eslint/no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state.socket'. Either include it or remove the dependency array.","ArrayExpression",["195"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",["193"],["194"],"React Hook useEffect has missing dependencies: 'dispatch' and 'state.socket'. Either include them or remove the dependency array.",["196"],"'steamId' is assigned a value but never used.","'setSteamId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'state.authState.username' and 'state.socket'. Either include them or remove the dependency array.",["197"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'state.socket'. Either include them or remove the dependency array.",["198"],"'faUser' is defined but never used.","'state' is assigned a value but never used.","'User' is defined but never used.",["199"],"'useEffect' is defined but never used.",["193"],["194"],"'participants' is assigned a value but never used.","'handleLeave' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"200","fix":"208"},"Update the dependencies array to be: [state.socket]",{"range":"209","text":"210"},"Update the dependencies array to be: [dispatch, state.socket]",{"range":"211","text":"212"},"Update the dependencies array to be: [state.authState.username, state.socket]",{"range":"213","text":"214"},"Update the dependencies array to be: [dispatch, history, state.socket]",{"range":"215","text":"216"},{"range":"217","text":"210"},[359,361],"[state.socket]",[758,760],"[dispatch, state.socket]",[1003,1005],"[state.authState.username, state.socket]",[908,910],"[dispatch, history, state.socket]",[521,523]]